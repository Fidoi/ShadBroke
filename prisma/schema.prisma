// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
  supervisor
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique
  Product    Product[]
  Discount   Discount? @relation(fields: [discountId], references: [id])
  discountId String?
}

model Product {
  id           String         @id @default(uuid())
  title        String
  description  String
  inStock      Int
  price        Float          @default(0)
  discount     Float?         @default(0)
  discountEnd  DateTime?
  sizes        Size[]         @default([])
  colors       String[]       @default([])
  slug         String         @unique
  tags         String[]       @default([])
  gender       Gender
  // Relaciones
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  ProductImage ProductImage[]
  discounts    Discount[]
  OrderItem    OrderItem[]
  Review       Review[]
  Favorite     Favorite[]

  @@index([gender])
}

model Discount {
  id         String     @id @default(uuid())
  type       String
  value      Float
  startDate  DateTime
  endDate    DateTime
  products   Product[]
  categories Category[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified DateTime?
  role          Role          @default(user)
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
  addresses     UserAddress[]
  Review        Review[]
  Favorite      Favorite[]
}

model Favorite {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([userId, productId])
}

model Order {
  id           String        @id @default(uuid())
  subTotal     Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean       @default(false)
  paidAt       DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  // Relaciones
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model UserAddress {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  address     String
  address2    String?
  phone       String
  // Relaciones con Regi贸n, Provincia y Comuna
  region      Region    @relation(fields: [regionId], references: [id])
  regionId    Int
  provincia   Provincia @relation(fields: [provinciaId], references: [id])
  provinciaId Int
  comuna      Comuna    @relation(fields: [comunaId], references: [id])
  comunaId    Int
  // Relaci贸n con el usuario
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  size      Size
  // Relaciones
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model OrderAddress {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  address     String
  address2    String?
  phone       String
  // Relaciones con Regi贸n, Provincia y Comuna
  region      Region    @relation(fields: [regionId], references: [id])
  regionId    Int
  provincia   Provincia @relation(fields: [provinciaId], references: [id])
  provinciaId Int
  comuna      Comuna    @relation(fields: [comunaId], references: [id])
  comunaId    Int
  // Relaci贸n con la orden
  Order       Order     @relation(fields: [orderId], references: [id])
  orderId     String    @unique
}

model Region {
  id           Int            @id @default(autoincrement())
  nombre       String
  provincias   Provincia[]
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model Provincia {
  id           Int            @id @default(autoincrement())
  nombre       String
  region       Region         @relation(fields: [regionId], references: [id])
  regionId     Int
  comunas      Comuna[]
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model Comuna {
  id           Int            @id @default(autoincrement())
  nombre       String
  provincia    Provincia      @relation(fields: [provinciaId], references: [id])
  provinciaId  Int
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  title     String?
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}
